/*! For license information please see ort.webgpu.min.mjs.LICENSE.txt */
var e,t,r,n,o,a,s,i,u,l,p,f,d,h,c,w,y,m,g,b,v,T,E,I,C,A,x,O,U,L,$,R,M,N,B=Object.defineProperty,S=Object.getOwnPropertyDescriptor,k=Object.getOwnPropertyNames,P=Object.prototype.hasOwnProperty,_=(e=function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')},typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(e,t)=>(typeof require<"u"?require:e)[t]}):e),G=(e,t)=>()=>(e&&(t=e(e=0)),t),D=(e,t)=>{for(var r in t)B(e,r,{get:t[r],enumerable:!0})},W=e=>((e,t,r,n)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let r of k(t))!P.call(e,r)&&undefined!==r&&B(e,r,{get:()=>t[r],enumerable:!(n=S(t,r))||n.enumerable});return e})(B({},"__esModule",{value:!0}),e),F=G(()=>{t=new Map,r=[],n=(e,n,o)=>{if(n&&"function"==typeof n.init&&"function"==typeof n.createInferenceSessionHandler){let a=t.get(e);if(void 0===a)t.set(e,{backend:n,priority:o});else{if(a.priority>o)return;if(a.priority===o&&a.backend!==n)throw new Error(`cannot register backend "${e}" using priority ${o}`)}if(o>=0){let n=r.indexOf(e);-1!==n&&r.splice(n,1);for(let n=0;n<r.length;n++)if(t.get(r[n]).priority<=o)return void r.splice(n,0,e);r.push(e)}return}throw new TypeError("not a valid backend")},o=async e=>{let r=t.get(e);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{let t=!!r.initPromise;try{return t||(r.initPromise=r.backend.init(e)),await r.initPromise,r.initialized=!0,r.backend}catch(e){return t||(r.error=`${e}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},a=async e=>{let t,n=e.executionProviders||[],a=n.map(e=>"string"==typeof e?e:e.name),s=0===a.length?r:a,i=[],u=new Set;for(let e of s){let r=await o(e);"string"==typeof r?i.push({name:e,err:r}):(t||(t=r),t===r&&u.add(e))}if(!t)throw new Error(`no available backend found. ERR: ${i.map(e=>`[${e.name}] ${e.err}`).join(", ")}`);for(let{name:e,err:t}of i)a.includes(e)&&console.warn(`removing requested execution provider "${e}" from session options because it is not available: ${t}`);let l=n.filter(e=>u.has("string"==typeof e?e:e.name));return[t,new Proxy(e,{get:(e,t)=>"executionProviders"===t?l:Reflect.get(e,t)})]}}),j=G(()=>{F()}),V=G(()=>{s="1.23.0"}),z=G(()=>{V(),i="warning",u={wasm:{},webgl:{},webgpu:{},versions:{common:s},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);i=e}},get logLevel(){return i}},Object.defineProperty(u,"logLevel",{enumerable:!0})}),H=G(()=>{z(),l=u}),q=G(()=>{p=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(null!=n){let o,a;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(o=e.dims[2],a=e.dims[3]):(o=e.dims[3],a=e.dims[2]);let s,i,u=void 0!==t?.format?t.format:"RGB",l=t?.norm;void 0===l||void 0===l.mean?s=[255,255,255,255]:"number"==typeof l.mean?s=[l.mean,l.mean,l.mean,l.mean]:(s=[l.mean[0],l.mean[1],l.mean[2],0],void 0!==l.mean[3]&&(s[3]=l.mean[3])),void 0===l||void 0===l.bias?i=[0,0,0,0]:"number"==typeof l.bias?i=[l.bias,l.bias,l.bias,l.bias]:(i=[l.bias[0],l.bias[1],l.bias[2],0],void 0!==l.bias[3]&&(i[3]=l.bias[3]));let p=a*o,f=0,d=p,h=2*p,c=-1;"RGBA"===u?(f=0,d=p,h=2*p,c=3*p):"RGB"===u?(f=0,d=p,h=2*p):"RBG"===u&&(f=0,h=p,d=2*p);for(let t=0;t<a;t++)for(let r=0;r<o;r++){let o=(e.data[f++]-i[0])*s[0],a=(e.data[d++]-i[1])*s[1],u=(e.data[h++]-i[2])*s[2],l=-1===c?255:(e.data[c++]-i[3])*s[3];n.fillStyle="rgba("+o+","+a+","+u+","+l+")",n.fillRect(r,t,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},f=(e,t)=>{let r,n=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");if(null==n)throw new Error("Can not access image data");{let o,a,s;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(o=e.dims[2],a=e.dims[1],s=e.dims[3]):(o=e.dims[3],a=e.dims[2],s=e.dims[1]);let i,u,l=void 0!==t&&void 0!==t.format?t.format:"RGB",p=t?.norm;void 0===p||void 0===p.mean?i=[255,255,255,255]:"number"==typeof p.mean?i=[p.mean,p.mean,p.mean,p.mean]:(i=[p.mean[0],p.mean[1],p.mean[2],255],void 0!==p.mean[3]&&(i[3]=p.mean[3])),void 0===p||void 0===p.bias?u=[0,0,0,0]:"number"==typeof p.bias?u=[p.bias,p.bias,p.bias,p.bias]:(u=[p.bias[0],p.bias[1],p.bias[2],0],void 0!==p.bias[3]&&(u[3]=p.bias[3]));let f=a*o;if(void 0!==t&&(void 0!==t.format&&4===s&&"RGBA"!==t.format||3===s&&"RGB"!==t.format&&"BGR"!==t.format))throw new Error("Tensor format doesn't match input tensor dims");let d=4,h=0,c=1,w=2,y=3,m=0,g=f,b=2*f,v=-1;"RGBA"===l?(m=0,g=f,b=2*f,v=3*f):"RGB"===l?(m=0,g=f,b=2*f):"RBG"===l&&(m=0,b=f,g=2*f),r=n.createImageData(o,a);for(let t=0;t<a*o;h+=d,c+=d,w+=d,y+=d,t++)r.data[h]=(e.data[m++]-u[0])*i[0],r.data[c]=(e.data[g++]-u[1])*i[1],r.data[w]=(e.data[b++]-u[2])*i[2],r.data[y]=-1===v?255:(e.data[v++]-u[3])*i[3]}return r}}),Z=G(()=>{J(),d=(e,t)=>{if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===t.height||void 0===t.width)throw new Error("Image height and width must be defined");if("NHWC"===t.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");let r,n,{height:o,width:a}=t,s=t.norm??{mean:255,bias:0};r="number"==typeof s.mean?[s.mean,s.mean,s.mean,s.mean]:[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],n="number"==typeof s.bias?[s.bias,s.bias,s.bias,s.bias]:[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];let i=void 0!==t.format?t.format:"RGBA",u=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:"RGB",l=o*a,p="RGBA"===u?new Float32Array(4*l):new Float32Array(3*l),f=4,d=0,h=1,c=2,w=3,y=0,m=l,g=2*l,b=-1;"RGB"===i&&(f=3,d=0,h=1,c=2,w=-1),"RGBA"===u?b=3*l:"RBG"===u?(y=0,g=l,m=2*l):"BGR"===u&&(g=0,m=l,y=2*l);for(let t=0;t<l;t++,d+=f,c+=f,h+=f,w+=f)p[y++]=(e[d]+n[0])/r[0],p[m++]=(e[h]+n[1])/r[1],p[g++]=(e[c]+n[2])/r[2],-1!==b&&-1!==w&&(p[b++]=(e[w]+n[3])/r[3]);return new C("float32",p,"RGBA"===u?[1,4,o,a]:[1,3,o,a])},h=async(e,t)=>{let r,n=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,o=typeof ImageData<"u"&&e instanceof ImageData,a=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s="string"==typeof e,i=t??{},u=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},l=e=>typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas?e.getContext("2d"):null;if(n){let n=u();n.width=e.width,n.height=e.height;let o=l(n);if(null==o)throw new Error("Can not access image data");{let n=e.height,a=e.width;if(void 0!==t&&void 0!==t.resizedHeight&&void 0!==t.resizedWidth&&(n=t.resizedHeight,a=t.resizedWidth),void 0!==t){if(i=t,void 0!==t.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");i.tensorFormat="RGBA",i.height=n,i.width=a}else i.tensorFormat="RGBA",i.height=n,i.width=a;o.drawImage(e,0,0),r=o.getImageData(0,0,a,n).data}}else{if(!o){if(a){if(void 0===t)throw new Error("Please provide image config with format for Imagebitmap");let n=u();n.width=e.width,n.height=e.height;let o=l(n);if(null!=o){let t=e.height,n=e.width;return o.drawImage(e,0,0,n,t),r=o.getImageData(0,0,n,t).data,i.height=t,i.width=n,d(r,i)}throw new Error("Can not access image data")}if(s)return new Promise((t,r)=>{let n=u(),o=l(n);if(!e||!o)return r();let a=new Image;a.crossOrigin="Anonymous",a.src=e,a.onload=()=>{n.width=a.width,n.height=a.height,o.drawImage(a,0,0,n.width,n.height);let e=o.getImageData(0,0,n.width,n.height);i.height=n.height,i.width=n.width,t(d(e.data,i))}});throw new Error("Input data provided is not supported - aborted tensor creation")}{let n,o;if(void 0!==t&&void 0!==t.resizedWidth&&void 0!==t.resizedHeight?(n=t.resizedHeight,o=t.resizedWidth):(n=e.height,o=e.width),void 0!==t&&(i=t),i.format="RGBA",i.height=n,i.width=o,void 0!==t){let t=u();t.width=o,t.height=n;let a=l(t);if(null==a)throw new Error("Can not access image data");a.putImageData(e,0,0),r=a.getImageData(0,0,o,n).data}else r=e.data}}if(void 0!==r)return d(r,i);throw new Error("Input data provided is not supported - aborted tensor creation")},c=(e,t)=>{let{width:r,height:n,download:o,dispose:a}=t;return new C({location:"texture",type:"float32",texture:e,dims:[1,n,r,4],download:o,dispose:a})},w=(e,t)=>{let{dataType:r,dims:n,download:o,dispose:a}=t;return new C({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:o,dispose:a})},y=(e,t)=>{let{dataType:r,dims:n,download:o,dispose:a}=t;return new C({location:"ml-tensor",type:r??"float32",mlTensor:e,dims:n,download:o,dispose:a})},m=(e,t,r)=>new C({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})}),X=G(()=>{g=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),b=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),v=!1,T=()=>{if(!v){v=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=globalThis.Float16Array,n=typeof r<"u"&&r.from;e&&(g.set("int64",BigInt64Array),b.set(BigInt64Array,"int64")),t&&(g.set("uint64",BigUint64Array),b.set(BigUint64Array,"uint64")),n?(g.set("float16",r),b.set(r,"float16")):g.set("float16",Uint16Array)}}}),Y=G(()=>{J(),E=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if("number"!=typeof n||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},I=(e,t)=>{switch(e.location){case"cpu":return new C(e.type,e.data,t);case"cpu-pinned":return new C({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new C({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new C({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});case"ml-tensor":return new C({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),J=G(()=>{q(),Z(),X(),Y(),C=class{constructor(e,t,r){let n,o;if(T(),"object"==typeof e&&"location"in e)switch(this.dataLocation=e.location,n=e.type,o=e.dims,e.location){case"cpu-pinned":{let t=g.get(n);if(!t)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof t))throw new TypeError(`buffer should be of type ${t.name}`);this.cpuData=e.data;break}case"texture":if("float32"!==n)throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case"gpu-buffer":if("float32"!==n&&"float16"!==n&&"int32"!==n&&"int64"!==n&&"uint32"!==n&&"uint8"!==n&&"bool"!==n&&"uint4"!==n&&"int4"!==n)throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;case"ml-tensor":if("float32"!==n&&"float16"!==n&&"int32"!==n&&"int64"!==n&&"uint32"!==n&&"uint64"!==n&&"int8"!==n&&"uint8"!==n&&"bool"!==n&&"uint4"!==n&&"int4"!==n)throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,s;if("string"==typeof e)if(n=e,s=r,"string"===e){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");a=t}else{let r=g.get(e);if(void 0===r)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if("float16"===e&&r===Uint16Array||"uint4"===e||"int4"===e)throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${r.name} as data.`);a="uint64"===e||"int64"===e?r.from(t,BigInt):r.from(t)}else if(t instanceof r)a=t;else if(t instanceof Uint8ClampedArray){if("uint8"!==e)throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");a=Uint8Array.from(t)}else{if(!("float16"===e&&t instanceof Uint16Array&&r!==Uint16Array))throw new TypeError(`A ${n} tensor's data must be type of ${r}`);a=new globalThis.Float16Array(t.buffer,t.byteOffset,t.length)}}else if(s=t,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");let t=typeof e[0];if("string"===t)n="string",a=e;else{if("boolean"!==t)throw new TypeError(`Invalid element type of data array: ${t}.`);n="bool",a=Uint8Array.from(e)}}else if(e instanceof Uint8ClampedArray)n="uint8",a=Uint8Array.from(e);else{let t=b.get(e.constructor);if(void 0===t)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=t,a=e}if(void 0===s)s=[a.length];else if(!Array.isArray(s))throw new TypeError("A tensor's dims must be a number array");o=s,this.cpuData=a,this.dataLocation="cpu"}let a=E(o);if(this.cpuData&&a!==this.cpuData.length&&("uint4"!==n&&"int4"!==n||Math.ceil(a/2)!==this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=a}static async fromImage(e,t){return h(e,t)}static fromTexture(e,t){return c(e,t)}static fromGpuBuffer(e,t){return w(e,t)}static fromMLTensor(e,t){return y(e,t)}static fromPinnedBuffer(e,t,r){return m(e,t,r)}toDataURL(e){return p(this,e)}toImageData(e){return f(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return I(this,e)}}}),K=G(()=>{J(),A=C}),Q=G(()=>{z(),x=(e,t)=>{(typeof u.trace>"u"?!u.wasm.trace:!u.trace)||console.timeStamp(`${e}::ORT::${t}`)},O=(e,t)=>{let r=(new Error).stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let o=0;o<r.length;o++){if(n&&!r[o].includes("TRACE_FUNC")){let n=`FUNC_${e}::${r[o].trim().split(" ")[1]}`;return t&&(n+=`::${t}`),void x("CPU",n)}r[o].includes("TRACE_FUNC")&&(n=!0)}},U=e=>{(typeof u.trace>"u"?!u.wasm.trace:!u.trace)||O("BEGIN",e)},L=e=>{(typeof u.trace>"u"?!u.wasm.trace:!u.trace)||O("END",e)},$=e=>{(typeof u.trace>"u"?!u.wasm.trace:!u.trace)||console.time(`ORT::${e}`)},R=e=>{(typeof u.trace>"u"?!u.wasm.trace:!u.trace)||console.timeEnd(`ORT::${e}`)}}),ee=G(()=>{F(),K(),Q(),M=class e{constructor(e){this.handler=e}async run(e,t,r){U(),$("InferenceSession.run");let n={},o={};if("object"!=typeof e||null===e||e instanceof A||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if("object"==typeof t){if(null===t)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof A)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(0===t.length)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let e of t){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);n[e]=null}if("object"==typeof r&&null!==r)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else{let e=!1,s=Object.getOwnPropertyNames(t);for(let r of this.outputNames)if(-1!==s.indexOf(r)){let o=t[r];(null===o||o instanceof A)&&(e=!0,a=!1,n[r]=o)}if(e){if("object"==typeof r&&null!==r)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else o=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let t of this.inputNames)if(typeof e[t]>"u")throw new Error(`input '${t}' is missing in 'feeds'.`);if(a)for(let e of this.outputNames)n[e]=null;let s=await this.handler.run(e,n,o),i={};for(let e in s)if(Object.hasOwnProperty.call(s,e)){let t=s[e];i[e]=t instanceof A?t:new A(t.type,t.data,t.dims)}return R("InferenceSession.run"),L(),i}async release(){return this.handler.dispose()}static async create(t,r,n,o){U(),$("InferenceSession.create");let s,i={};if("string"==typeof t){if(s=t,"object"==typeof r&&null!==r)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,"object"==typeof r&&null!==r)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else{if(!(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{let e=t,a=0,u=t.byteLength;if("object"==typeof r&&null!==r)i=r;else if("number"==typeof r){if(a=r,!Number.isSafeInteger(a))throw new RangeError("'byteOffset' must be an integer.");if(a<0||a>=e.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${e.byteLength}).`);if(u=t.byteLength-a,"number"==typeof n){if(u=n,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||a+u>e.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${e.byteLength-a}].`);if("object"==typeof o&&null!==o)i=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(e,a,u)}}let[u,l]=await a(i),p=await u.createInferenceSessionHandler(s,l);return R("InferenceSession.create"),L(),new e(p)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),te=G(()=>{ee(),N=M}),re=G(()=>{}),ne=G(()=>{}),oe=G(()=>{}),ae=G(()=>{}),se={};D(se,{InferenceSession:()=>N,TRACE:()=>x,TRACE_EVENT_BEGIN:()=>$,TRACE_EVENT_END:()=>R,TRACE_FUNC_BEGIN:()=>U,TRACE_FUNC_END:()=>L,Tensor:()=>A,env:()=>l,registerBackend:()=>n});var ie=G(()=>{j(),H(),te(),K(),re(),ne(),Q(),oe(),ae()}),ue=G(()=>{}),le={};D(le,{default:()=>de});var pe,fe,de,he,ce,we,ye,me,ge,be,ve,Te,Ee,Ie,Ce,Ae,xe,Oe,Ue,Le,$e,Re,Me,Ne,Be,Se,ke,Pe,_e,Ge,De,We,Fe,je,Ve,ze,He,qe,Ze,Xe,Ye,Je,Ke,Qe,et,tt,rt,nt,ot,at,st,it,ut,lt,pt,ft,dt,ht,ct,wt,yt,mt,gt,bt,vt,Tt=G(()=>{mr(),It(),Et(),pe="ort-wasm-proxy-worker",(fe=globalThis.self?.name===pe)&&(self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Be(r.wasm).then(()=>{Pt(r).then(()=>{postMessage({type:t})},e=>{postMessage({type:t,err:e})})},e=>{postMessage({type:t,err:e})});break;case"init-ep":{let{epName:e,env:n}=r;_t(n,e).then(()=>{postMessage({type:t})},e=>{postMessage({type:t,err:e})});break}case"copy-from":{let{buffer:e}=r,n=Ft(e);postMessage({type:t,out:n});break}case"create":{let{model:e,options:n}=r;jt(e,n).then(e=>{postMessage({type:t,out:e})},e=>{postMessage({type:t,err:e})});break}case"release":Vt(r),postMessage({type:t});break;case"run":{let{sessionId:e,inputIndices:n,inputs:o,outputIndices:a,options:s}=r;Ht(e,n,o,a,new Array(a.length).fill(null),s).then(e=>{e.some(e=>"cpu"!==e[3])?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:e},Zt([...o,...e]))},e=>{postMessage({type:t,err:e})});break}case"end-profiling":qt(r),postMessage({type:t})}}catch(e){postMessage({type:t,err:e})}}),de=fe?null:e=>new Worker(e??ye,{type:"module",name:pe})}),Et=G(()=>{ue(),he=typeof location>"u"?void 0:location.origin,ce=import.meta.url>"file:"&&import.meta.url<"file;",we=()=>{if(ce){let e=URL;return new URL(new e("ort.webgpu.min.mjs",import.meta.url).href,he).href}return import.meta.url},ye=we(),me=()=>{if(ye&&!ye.startsWith("blob:"))return ye.substring(0,ye.lastIndexOf("/")+1)},ge=(e,t)=>{try{let r=t??ye;return(r?new URL(e,r):new URL(e)).origin===he}catch{return!1}},be=(e,t)=>{let r=t??ye;try{return(r?new URL(e,r):new URL(e)).href}catch{return}},ve=(e,t)=>`${t??"./"}${e}`,Te=async e=>{let t=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(t)},Ee=async e=>(await import(e)).default,Ie=(Tt(),W(le)).default,Ce=async()=>{if(!ye)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(ge(ye))return[void 0,Ie()];let e=await Te(ye);return[e,Ie(e)]},Ae=void 0,xe=async(e,t,r,n)=>{let o=Ae;if(o)if(ye)o=ge(ye);else{if(!n||r)throw new Error("cannot determine the script source URL.");o=!0}if(o)return[void 0,Ae];{let n="ort-wasm-simd-threaded.asyncify.mjs",o=e??be(n,t),a=r&&o&&!ge(o,t),s=a?await Te(o):o??ve(n,t);return[a?s:void 0,await Ee(s)]}}}),It=G(()=>{Et(),Ue=!1,Le=!1,$e=!1,Re=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Me=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Ne=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},Be=async e=>{if(Ue)return Promise.resolve();if(Le)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if($e)throw new Error("previous call to 'initializeWebAssembly()' failed.");Le=!0;let t=e.initTimeout,r=e.numThreads;if(!1!==e.simd)if("relaxed"===e.simd){if(!Ne())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!Me())throw new Error("WebAssembly SIMD is not supported in the current environment.");let n=Re();r>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+r+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=r=1);let o=e.wasmPaths,a="string"==typeof o?o:void 0,s=o?.mjs,i=s?.href??s,u=o?.wasm,l=u?.href??u,p=e.wasmBinary,[f,d]=await xe(i,a,r>1,!!p||!!l),h=!1,c=[];if(t>0&&c.push(new Promise(e=>{setTimeout(()=>{h=!0,e()},t)})),c.push(new Promise((e,t)=>{let n={numThreads:r};if(p)n.wasmBinary=p;else if(l||a)n.locateFile=e=>l??a+e;else if(i&&0!==i.indexOf("blob:"))n.locateFile=e=>new URL(e,i).href;else if(f){let e=me();e&&(n.locateFile=t=>e+t)}d(n).then(t=>{Le=!1,Ue=!0,Oe=t,e(),f&&URL.revokeObjectURL(f)},e=>{Le=!1,$e=!0,t(e)})})),await Promise.race(c),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Se=()=>{if(Ue&&Oe)return Oe;throw new Error("WebAssembly is not initialized yet.")}}),Ct=G(()=>{It(),ke=(e,t)=>{let r=Se(),n=r.lengthBytesUTF8(e)+1,o=r._malloc(n);return r.stringToUTF8(e,o,n),t.push(o),o},Pe=(e,t,r,n)=>{if("object"==typeof e&&null!==e){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([e,o])=>{let a=t?t+e:e;if("object"==typeof o)Pe(o,a+".",r,n);else if("string"==typeof o||"number"==typeof o)n(a,o.toString());else{if("boolean"!=typeof o)throw new Error("Can't handle extra config type: "+typeof o);n(a,o?"1":"0")}})},_e=e=>{let t=Se(),r=t.stackSave();try{let r=t.PTR_SIZE,n=t.stackAlloc(2*r);t._OrtGetLastError(n,n+r);let o=Number(t.getValue(n,4===r?"i32":"i64")),a=t.getValue(n+r,"*"),s=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${o}, ERROR_MESSAGE: ${s}`)}finally{t.stackRestore(r)}}}),At=G(()=>{It(),Ct(),Ge=e=>{let t=Se(),r=0,n=[],o=e||{};try{if(void 0===e?.logSeverityLevel)o.logSeverityLevel=2;else if("number"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log severity level is not valid: ${e.logSeverityLevel}`);if(void 0===e?.logVerbosityLevel)o.logVerbosityLevel=0;else if("number"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===e?.terminate&&(o.terminate=!1);let a=0;return void 0!==e?.tag&&(a=ke(e.tag,n)),r=t._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,a),0===r&&_e("Can't create run options."),void 0!==e?.extra&&Pe(e.extra,"",new WeakSet,(e,o)=>{let a=ke(e,n),s=ke(o,n);0!==t._OrtAddRunConfigEntry(r,a,s)&&_e(`Can't set a run config entry: ${e} - ${o}.`)}),[r,n]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),n.forEach(e=>t._free(e)),e}}}),xt=G(()=>{It(),Ct(),De=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"layout":return 3;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},We=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Fe=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(e=>"webgpu"===("string"==typeof e?e:e.name))&&(e.enableMemPattern=!1)},je=(e,t,r,n)=>{let o=ke(t,n),a=ke(r,n);0!==Se()._OrtAddSessionConfigEntry(e,o,a)&&_e(`Can't set a session config entry: ${t} - ${r}.`)},Ve=(e,t,r,n)=>{let o=ke(t,n),a=ke(r,n);e.push([o,a])},ze=async(e,t,r)=>{for(let n of t){let t="string"==typeof n?n:n.name,o=[];switch(t){case"webnn":if(t="WEBNN","string"!=typeof n){let t=n?.deviceType;t&&je(e,"deviceType",t,r)}break;case"webgpu":{let e;if(t="WebGPU","string"!=typeof n){let t=n;if(t.device){if(!(typeof GPUDevice<"u"&&t.device instanceof GPUDevice))throw new Error("Invalid GPU device set in WebGPU EP options.");e=t.device}}let a=Se().webgpuRegisterDevice(e);if(a){let[e,t,n]=a;Ve(o,"deviceId",e.toString(),r),Ve(o,"webgpuInstance",t.toString(),r),Ve(o,"webgpuDevice",n.toString(),r)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${t}`)}let a=ke(t,r),s=o.length,i=0,u=0;if(s>0){i=Se()._malloc(s*Se().PTR_SIZE),r.push(i),u=Se()._malloc(s*Se().PTR_SIZE),r.push(u);for(let e=0;e<s;e++)Se().setValue(i+e*Se().PTR_SIZE,o[e][0],"*"),Se().setValue(u+e*Se().PTR_SIZE,o[e][1],"*")}0!==await Se()._OrtAppendExecutionProvider(e,a,i,u,s)&&_e(`Can't append execution provider: ${t}.`)}},He=async e=>{let t=Se(),r=0,n=[],o=e||{};Fe(o);try{let e=De(o.graphOptimizationLevel??"all"),a=We(o.executionMode??"sequential"),s="string"==typeof o.logId?ke(o.logId,n):0,i=o.logSeverityLevel??2;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log severity level is not valid: ${i}`);let u=o.logVerbosityLevel??0;if(!Number.isInteger(u)||u<0||u>4)throw new Error(`log verbosity level is not valid: ${u}`);let l="string"==typeof o.optimizedModelFilePath?ke(o.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(e,!!o.enableCpuMemArena,!!o.enableMemPattern,a,!!o.enableProfiling,0,s,i,u,l),0===r&&_e("Can't create session options."),o.executionProviders&&await ze(r,o.executionProviders,n),void 0!==o.enableGraphCapture){if("boolean"!=typeof o.enableGraphCapture)throw new Error(`enableGraphCapture must be a boolean value: ${o.enableGraphCapture}`);je(r,"enableGraphCapture",o.enableGraphCapture.toString(),n)}if(o.freeDimensionOverrides)for(let[e,a]of Object.entries(o.freeDimensionOverrides)){if("string"!=typeof e)throw new Error(`free dimension override name must be a string: ${e}`);if("number"!=typeof a||!Number.isInteger(a)||a<0)throw new Error(`free dimension override value must be a non-negative integer: ${a}`);let o=ke(e,n);0!==t._OrtAddFreeDimensionOverride(r,o,a)&&_e(`Can't set a free dimension override: ${e} - ${a}.`)}return void 0!==o.extra&&Pe(o.extra,"",new WeakSet,(e,t)=>{je(r,e,t,n)}),[r,n]}catch(e){throw 0!==r&&0!==t._OrtReleaseSessionOptions(r)&&_e("Can't release session options."),n.forEach(e=>t._free(e)),e}}}),Ot=G(()=>{qe=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},Ze=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},Xe=(e,t)=>{let r=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],n="number"==typeof t?t:t.reduce((e,t)=>e*t,1);return r>0?Math.ceil(n*r):void 0},Ye=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Je=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Ke=e=>"float32"===e||"float16"===e||"int32"===e||"int64"===e||"uint32"===e||"uint8"===e||"bool"===e||"uint4"===e||"int4"===e,Qe=e=>"float32"===e||"float16"===e||"int32"===e||"int64"===e||"uint32"===e||"uint64"===e||"int8"===e||"uint8"===e||"bool"===e||"uint4"===e||"int4"===e,et=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),Ut=G(()=>{ue(),tt=async e=>{if("string"==typeof e){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let r,o=t.body.getReader();try{r=new ArrayBuffer(n)}catch(e){if(!(e instanceof RangeError))throw e;{let e=Math.ceil(n/65536);r=new WebAssembly.Memory({initial:e,maximum:e}).buffer}}let a=0;for(;;){let{done:e,value:t}=await o.read();if(e)break;let n=t.byteLength;new Uint8Array(r,a,n).set(t),a+=n}return new Uint8Array(r,0,n)}}return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),Lt=G(()=>{Ot(),rt=(e,t)=>new(Ye(t))(e)}),$t=G(()=>{Ot(),nt=["V","I","W","E","F"],ot=(e,t)=>{console.log(`[${nt[e]},${(new Date).toISOString()}]${t}`)},it=(e,t)=>{at=e,st=t},ut=(e,t)=>{let r=Je(e);r>=Je(at)&&ot(r,"function"==typeof t?t():t)},lt=(...e)=>{st&&ut(...e)}}),Rt=G(()=>{Ot(),$t(),pt=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),ft=(e,t)=>{if("int32"===t)return e;let r=pt.get(t);if(!r)throw new Error(`WebNN backend does not support data type: ${t}`);let n=r/8;if(e.byteLength%n!==0)throw new Error(`Invalid Uint8Array length - must be a multiple of ${n}.`);let o=e.byteLength/n,a=new(Ye(t))(e.buffer,e.byteOffset,o);switch(t){case"int64":case"uint64":{let e=new Int32Array(o);for(let t=0;t<o;t++){let r=a[t];if(r>2147483647n||r<-2147483648n)throw new Error("Can not convert int64 data to int32 - value out of range.");e[t]=Number(r)}return new Uint8Array(e.buffer)}case"int8":case"uint8":case"uint32":{if("uint32"===t&&a.some(e=>e>2147483647))throw new Error("Can not convert uint32 data to int32 - value out of range.");let e=Int32Array.from(a,Number);return new Uint8Array(e.buffer)}default:throw new Error(`Unsupported data conversion from ${t} to 'int32'`)}},dt=(e,t)=>{if("int32"===t)return e;if(e.byteLength%4!=0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (int32).");let r=e.byteLength/4,n=new Int32Array(e.buffer,e.byteOffset,r);switch(t){case"int64":{let e=BigInt64Array.from(n,BigInt);return new Uint8Array(e.buffer)}case"uint64":{if(n.some(e=>e<0))throw new Error("Can not convert int32 data to uin64 - negative value found.");let e=BigUint64Array.from(n,BigInt);return new Uint8Array(e.buffer)}case"int8":{if(n.some(e=>e<-128||e>127))throw new Error("Can not convert int32 data to int8 - value out of range.");let e=Int8Array.from(n,Number);return new Uint8Array(e.buffer)}case"uint8":if(n.some(e=>e<0||e>255))throw new Error("Can not convert int32 data to uint8 - value out of range.");return Uint8Array.from(n,Number);case"uint32":{if(n.some(e=>e<0))throw new Error("Can not convert int32 data to uint32 - negative value found.");let e=Uint32Array.from(n,Number);return new Uint8Array(e.buffer)}default:throw new Error(`Unsupported data conversion from 'int32' to ${t}`)}},ht=1,ct=()=>ht++,wt=new Map([["int8","int32"],["uint8","int32"],["uint32","int32"],["int64","int32"]]),yt=(e,t)=>{let r=pt.get(e);if(!r)throw new Error(`WebNN backend does not support data type: ${e}`);return t.length>0?Math.ceil(t.reduce((e,t)=>e*t)*r/8):0},mt=class{constructor(e){this.isDataConverted=!1;let{sessionId:t,context:r,tensor:n,dataType:o,shape:a,fallbackDataType:s}=e;this.sessionId=t,this.mlContext=r,this.mlTensor=n,this.dataType=o,this.tensorShape=a,this.fallbackDataType=s}get tensor(){return this.mlTensor}get type(){return this.dataType}get fallbackType(){return this.fallbackDataType}get shape(){return this.tensorShape}get byteLength(){return yt(this.dataType,this.tensorShape)}destroy(){lt("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e){if(this.fallbackDataType){let t=await this.mlContext.readTensor(this.mlTensor),r=dt(new Uint8Array(t),this.dataType);return e?void(e instanceof ArrayBuffer?new Uint8Array(e):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)).set(r):r.buffer}return e?this.mlContext.readTensor(this.mlTensor,e):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,t,r){return this.mlContext===e&&this.dataType===t&&this.tensorShape.length===r.length&&this.tensorShape.every((e,t)=>e===r[t])}setIsDataConverted(e){this.isDataConverted=e}},gt=class{constructor(e,t){this.tensorManager=e,this.wrapper=t}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,t,r,n){let o,a=this.tensorManager.getMLContext(e);if(!a.opSupportLimits().input.dataTypes.includes(t)){if(o=wt.get(t),!o||!a.opSupportLimits().input.dataTypes.includes(o))throw new Error(`WebNN backend does not support data type: ${t}`);lt("verbose",()=>`[WebNN] TensorIdTracker.ensureTensor: fallback dataType from ${t} to ${o}`)}if(this.wrapper){if(this.wrapper.canReuseTensor(a,t,r))return this.wrapper.tensor;if(n){if(this.wrapper.byteLength!==yt(t,r))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let s=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,t,r,s,!0,!0,o),n&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let t=e;if(this.wrapper){if(this.wrapper.fallbackType){if("int32"!==this.wrapper.fallbackType)throw new Error(`Unsupported fallback data type: ${this.wrapper.fallbackType}`);t=ft(e,this.wrapper.type),this.wrapper.setIsDataConverted(!0)}if(e.byteLength===this.wrapper.byteLength)return void this.wrapper.write(t);lt("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor()}this.activeUpload?this.activeUpload.set(t):this.activeUpload=new Uint8Array(t)}async download(e){if(this.activeUpload){let t=this.wrapper?.isDataConverted?dt(this.activeUpload,this.wrapper?.type):this.activeUpload;return e?void(e instanceof ArrayBuffer?new Uint8Array(e).set(t):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(t)):t.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read(e):this.wrapper.read()}},bt=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let t=this.backend.getMLContext(e);if(!t)throw new Error("MLContext not found for session.");return t}reserveTensorId(){let e=ct();return this.tensorTrackersById.set(e,new gt(this)),e}releaseTensorId(e){let t=this.tensorTrackersById.get(e);t&&(this.tensorTrackersById.delete(e),t.tensorWrapper&&this.releaseTensor(t.tensorWrapper))}async ensureTensor(e,t,r,n,o){lt("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${t}, dataType: ${r}, shape: ${n}, copyOld: ${o}}`);let a=this.tensorTrackersById.get(t);if(!a)throw new Error("Tensor not found.");return a.ensureTensor(e,r,n,o)}upload(e,t){let r=this.tensorTrackersById.get(e);if(!r)throw new Error("Tensor not found.");r.upload(t)}async download(e,t){lt("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${t?.byteLength}}`);let r=this.tensorTrackersById.get(e);if(!r)throw new Error("Tensor not found.");return r.download(t)}releaseTensorsForSession(e){for(let t of this.freeTensors)t.sessionId===e&&t.destroy();this.freeTensors=this.freeTensors.filter(t=>t.sessionId!==e)}registerTensor(e,t,r,n){let o=this.getMLContext(e),a=ct(),s=new mt({sessionId:e,context:o,tensor:t,dataType:r,shape:n});return this.tensorTrackersById.set(a,new gt(this,s)),this.externalTensors.add(s),a}async getCachedTensor(e,t,r,n,o,a,s){let i=this.getMLContext(e);for(let[n,o]of this.freeTensors.entries())if(o.canReuseTensor(i,t,r)){lt("verbose",()=>`[WebNN] Reusing tensor {dataType: ${t}, ${s?`fallbackDataType: ${s},`:""} shape: ${r}`);let o=this.freeTensors.splice(n,1)[0];return o.sessionId=e,o}lt("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${t}, ${s?`fallbackDataType: ${s},`:""} shape: ${r}}`);let u=await i.createTensor({dataType:s??t,shape:r,dimensions:r,usage:n,writable:o,readable:a});return new mt({sessionId:e,context:i,tensor:u,dataType:t,shape:r,fallbackDataType:s})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},vt=(...e)=>new bt(...e)}),Mt={};D(Mt,{WebNNBackend:()=>St});var Nt,Bt,St,kt,Pt,_t,Gt,Dt,Wt,Ft,jt,Vt,zt,Ht,qt,Zt,Xt,Yt,Jt,Kt,Qt,er,tr,rr,nr,or,ar,sr,ir,ur,lr,pr,fr,dr,hr,cr,wr,yr=G(()=>{Ot(),It(),Lt(),Rt(),$t(),Nt=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),Bt=(e,t)=>{if(e===t)return!0;if(void 0===e||void 0===t)return!1;let r=Object.keys(e).sort(),n=Object.keys(t).sort();return r.length===n.length&&r.every((r,o)=>r===n[o]&&e[r]===t[r])},St=class{constructor(e){this.tensorManager=vt(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.sessionGraphOutputs=new Map,this.temporaryGraphInputs=[],this.temporaryGraphOutputs=[],this.temporarySessionTensorIds=new Map,it(e.logLevel,!!e.debug)}get currentSessionId(){if(void 0===this.activeSessionId)throw new Error("No active session");return this.activeSessionId}onRunStart(e){lt("verbose",()=>`[WebNN] onRunStart {sessionId: ${e}}`),this.activeSessionId=e}onRunEnd(e){lt("verbose",()=>`[WebNN] onRunEnd {sessionId: ${e}}`);let t=this.temporarySessionTensorIds.get(e);if(t){for(let e of t)lt("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let t=this.mlContextCache.findIndex(t=>t.gpuDevice===e);if(-1!==t)return this.mlContextCache[t].mlContext;{let t=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:t}),t}}if(void 0===e){let e=this.mlContextCache.findIndex(e=>void 0===e.options&&void 0===e.gpuDevice);if(-1!==e)return this.mlContextCache[e].mlContext;{let e=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:e}),e}}let t=this.mlContextCache.findIndex(t=>Bt(t.options,e));if(-1!==t)return this.mlContextCache[t].mlContext;{let t=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:t}),t}}registerMLContext(e,t){this.mlContextBySessionId.set(e,t);let r=this.sessionIdsByMLContext.get(t);r||(r=new Set,this.sessionIdsByMLContext.set(t,r)),r.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[]),this.temporaryGraphOutputs.length>0&&(this.sessionGraphOutputs.set(e,this.temporaryGraphOutputs),this.temporaryGraphOutputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e),this.sessionGraphOutputs.delete(e);let t=this.mlContextBySessionId.get(e);if(!t)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let r=this.sessionIdsByMLContext.get(t);if(r.delete(e),0===r.size){this.sessionIdsByMLContext.delete(t);let e=this.mlContextCache.findIndex(e=>e.mlContext===t);-1!==e&&this.mlContextCache.splice(e,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){lt("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,t,r,n,o){let a=Nt.get(r);if(!a)throw new Error(`Unsupported ONNX data type: ${r}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,t,a,n,o)}async createTemporaryTensor(e,t,r){lt("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${t}, shape: ${r}}`);let n=Nt.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let o=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,o,n,r,!1);let a=this.temporarySessionTensorIds.get(e);return a?a.push(o):this.temporarySessionTensorIds.set(e,[o]),o}uploadTensor(e,t){if(!Se().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");lt("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${t.byteLength}}`),this.tensorManager.upload(e,t)}async downloadTensor(e,t){return this.tensorManager.download(e,t)}createMLTensorDownloader(e,t){return async()=>{let r=await this.tensorManager.download(e);return rt(r,t)}}registerMLTensor(e,t,r,n){let o=Nt.get(r);if(!o)throw new Error(`Unsupported ONNX data type: ${r}`);let a=this.tensorManager.registerTensor(e,t,o,n);return lt("verbose",()=>`[WebNN] registerMLTensor {tensor: ${t}, dataType: ${o}, dimensions: ${n}} -> {tensorId: ${a}}`),a}registerMLConstant(e,t,r,n,o,a,s=!1){if(!a)throw new Error("External mounted files are not available.");let i=e;e.startsWith("./")&&(i=e.substring(2));let u=a.get(i);if(!u)throw new Error(`File with name ${i} not found in preloaded files.`);if(t+r>u.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let l,p=u.slice(t,t+r).buffer;switch(o.dataType){case"float32":l=new Float32Array(p);break;case"float16":l=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(p):new Uint16Array(p);break;case"int32":l=new Int32Array(p);break;case"uint32":l=new Uint32Array(p);break;case"int64":if(s){let e=ft(new Uint8Array(p),"int64");l=new Int32Array(e.buffer),o.dataType="int32"}else l=new BigInt64Array(p);break;case"uint64":l=new BigUint64Array(p);break;case"int8":l=new Int8Array(p);break;case"int4":case"uint4":case"uint8":l=new Uint8Array(p);break;default:throw new Error(`Unsupported data type: ${o.dataType} in creating WebNN Constant from external data.`)}return lt("verbose",()=>`[WebNN] registerMLConstant {dataType: ${o.dataType}, shape: ${o.shape}}} ${s?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),n.constant(o,l)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}registerGraphOutput(e){this.temporaryGraphOutputs.push(e)}isGraphInput(e,t){let r=this.sessionGraphInputs.get(e);return!!r&&r.includes(t)}isGraphOutput(e,t){let r=this.sessionGraphOutputs.get(e);return!!r&&r.includes(t)}isGraphInputOutputTypeSupported(e,t,r=!0){let n=this.mlContextBySessionId.get(e),o=Nt.get(qe(t));return!(typeof o>"u"||(r?!n?.opSupportLimits().input.dataTypes.includes(o):!n?.opSupportLimits().output.dataTypes.includes(o)))}flush(){}}}),mr=G(()=>{ie(),At(),xt(),Ot(),It(),Ct(),Ut(),kt=(e,t)=>{0!==Se()._OrtInit(e,t)&&_e("Can't initialize onnxruntime.")},Pt=async e=>{kt(e.wasm.numThreads,Je(e.logLevel))},_t=async(e,t)=>{Se().asyncInit?.();let r=e.webgpu.adapter;if("webgpu"===t){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");if(r){if("object"!=typeof r.limits||"object"!=typeof r.features||"function"!=typeof r.requestDevice)throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let t=e.webgpu.powerPreference;if(void 0!==t&&"low-power"!==t&&"high-performance"!==t)throw new Error(`Invalid powerPreference setting: "${t}"`);let n=e.webgpu.forceFallbackAdapter;if(void 0!==n&&"boolean"!=typeof n)throw new Error(`Invalid forceFallbackAdapter setting: "${n}"`);if(r=await navigator.gpu.requestAdapter({powerPreference:t,forceFallbackAdapter:n}),!r)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}}if("webnn"===t&&(typeof navigator>"u"||!navigator.ml))throw new Error("WebNN is not supported in current environment");if("webgpu"===t&&Se().webgpuInit(t=>{e.webgpu.device=t}),"webnn"===t){let t=new((yr(),W(Mt)).WebNNBackend)(e);Se().webnnInit([t,()=>t.reserveTensorId(),e=>t.releaseTensorId(e),async(e,r,n,o,a)=>t.ensureTensor(e,r,n,o,a),(e,r)=>{t.uploadTensor(e,r)},async(e,r)=>t.downloadTensor(e,r),(e,r)=>t.registerMLContext(e,r),!!e.trace])}},Gt=new Map,Dt=e=>{let t=Se(),r=t.stackSave();try{let r=t.PTR_SIZE,n=t.stackAlloc(2*r);0!==t._OrtGetInputOutputCount(e,n,n+r)&&_e("Can't get session input/output count.");let o=4===r?"i32":"i64";return[Number(t.getValue(n,o)),Number(t.getValue(n+r,o))]}finally{t.stackRestore(r)}},Wt=(e,t)=>{let r=Se(),n=r.stackSave(),o=0;try{let n=r.PTR_SIZE,a=r.stackAlloc(2*n);0!==r._OrtGetInputOutputMetadata(e,t,a,a+n)&&_e("Can't get session input/output metadata.");let s=Number(r.getValue(a,"*"));o=Number(r.getValue(a+n,"*"));let i=r.HEAP32[o/4];if(0===i)return[s,0];let u=r.HEAPU32[o/4+1],l=[];for(let e=0;e<u;e++){let t=Number(r.getValue(o+8+e*n,"*"));l.push(0!==t?r.UTF8ToString(t):Number(r.getValue(o+8+(e+u)*n,"*")))}return[s,i,l]}finally{r.stackRestore(n),0!==o&&r._OrtFree(o)}},Ft=e=>{let t=Se(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},jt=async(e,t)=>{let r,n,o=Se();Array.isArray(e)?[r,n]=e:e.buffer===o.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=Ft(e);let a=0,s=0,i=0,u=[],l=[],p=[];try{if([s,u]=await He(t),t?.externalData&&o.mountExternalData){let e=[];for(let r of t.externalData){let t="string"==typeof r?r:r.path;e.push(tt("string"==typeof r?r:r.data).then(e=>{o.mountExternalData(t,e)}))}await Promise.all(e)}for(let e of t?.executionProviders??[])if("webnn"===("string"==typeof e?e:e.name)){if(o.shouldTransferToMLTensor=!1,"string"!=typeof e){let t=e,r=t?.context,n=t?.gpuDevice,a=t?.deviceType,s=t?.powerPreference;o.currentContext=r||(n?await o.webnnCreateMLContext(n):await o.webnnCreateMLContext({deviceType:a,powerPreference:s}))}else o.currentContext=await o.webnnCreateMLContext();break}a=await o._OrtCreateSession(r,n,s),o.webgpuOnCreateSession?.(a),0===a&&_e("Can't create a session."),o.jsepOnCreateSession?.(),o.currentContext&&(o.webnnRegisterMLContext(a,o.currentContext),o.currentContext=void 0,o.shouldTransferToMLTensor=!0);let[e,f]=Dt(a),d=!!t?.enableGraphCapture,h=[],c=[],w=[],y=[],m=[];for(let t=0;t<e;t++){let[e,r,n]=Wt(a,t);0===e&&_e("Can't get an input name."),l.push(e);let s=o.UTF8ToString(e);h.push(s),w.push(0===r?{name:s,isTensor:!1}:{name:s,isTensor:!0,type:Ze(r),shape:n})}for(let r=0;r<f;r++){let[n,s,i]=Wt(a,r+e);0===n&&_e("Can't get an output name."),p.push(n);let u=o.UTF8ToString(n);c.push(u),y.push(0===s?{name:u,isTensor:!1}:{name:u,isTensor:!0,type:Ze(s),shape:i});{if(d&&void 0===t?.preferredOutputLocation){m.push("gpu-buffer");continue}let e="string"==typeof t?.preferredOutputLocation?t.preferredOutputLocation:t?.preferredOutputLocation?.[u]??"cpu",r=o.webnnIsGraphOutput;if("cpu"===e&&r&&r(a,u)){m.push("ml-tensor-cpu-output");continue}if("cpu"!==e&&"cpu-pinned"!==e&&"gpu-buffer"!==e&&"ml-tensor"!==e)throw new Error(`Not supported preferred output location: ${e}.`);if(d&&"gpu-buffer"!==e)throw new Error(`Not supported preferred output location: ${e}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);m.push(e)}}let g=null;return m.some(e=>"gpu-buffer"===e||"ml-tensor"===e||"ml-tensor-cpu-output"===e)&&(i=o._OrtCreateBinding(a),0===i&&_e("Can't create IO binding."),g={handle:i,outputPreferredLocations:m,outputPreferredLocationsEncoded:m.map(e=>"ml-tensor-cpu-output"===e?"ml-tensor":e).map(e=>et(e))}),Gt.set(a,[a,l,p,g,d,!1]),[a,h,c,w,y]}catch(e){throw l.forEach(e=>o._OrtFree(e)),p.forEach(e=>o._OrtFree(e)),0!==i&&0!==o._OrtReleaseBinding(i)&&_e("Can't release IO binding."),0!==a&&0!==o._OrtReleaseSession(a)&&_e("Can't release session."),e}finally{o._free(r),0!==s&&0!==o._OrtReleaseSessionOptions(s)&&_e("Can't release session options."),u.forEach(e=>o._free(e)),o.unmountExternalData?.()}},Vt=e=>{let t=Se(),r=Gt.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,o,a,s,i]=r;s&&(i&&0!==t._OrtClearBoundOutputs(s.handle)&&_e("Can't clear bound outputs."),0!==t._OrtReleaseBinding(s.handle)&&_e("Can't release IO binding.")),t.jsepOnReleaseSession?.(e),t.webnnOnReleaseSession?.(e),t.webgpuOnReleaseSession?.(e),o.forEach(e=>t._OrtFree(e)),a.forEach(e=>t._OrtFree(e)),0!==t._OrtReleaseSession(n)&&_e("Can't release session."),Gt.delete(e)},zt=async(e,t,r,n,o,a,s=!1)=>{if(!e)return void t.push(0);let i,u,l=Se(),p=l.PTR_SIZE,f=e[0],d=e[1],h=e[3],c=h;if("string"===f&&("gpu-buffer"===h||"ml-tensor"===h))throw new Error("String tensor is not supported on GPU.");if(s&&"gpu-buffer"!==h)throw new Error(`External buffer must be provided for input/output index ${a} when enableGraphCapture is true.`);if("gpu-buffer"===h){let t=e[2].gpuBuffer;u=Xe(qe(f),d);{let e=l.webgpuRegisterBuffer;if(!e)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');i=e(t,n)}}else if("ml-tensor"===h){let t=e[2].mlTensor;u=Xe(qe(f),d);let r=l.webnnRegisterMLTensor;if(!r)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');i=r(n,t,qe(f),d)}else{let t=e[2];if(Array.isArray(t)){u=p*t.length,i=l._malloc(u),r.push(i);for(let e=0;e<t.length;e++){if("string"!=typeof t[e])throw new TypeError(`tensor data at index ${e} is not a string`);l.setValue(i+e*p,ke(t[e],r),"*")}}else{let e=l.webnnIsGraphInput,a=l.webnnIsGraphOutput;if("string"!==f&&e&&a){let s=l.UTF8ToString(o);if(e(n,s)||a(n,s)){let e=qe(f);u=Xe(e,d),c="ml-tensor";let r=l.webnnCreateTemporaryTensor,o=l.webnnUploadTensor;if(!r||!o)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let a=await r(n,e,d);o(a,new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),i=a}else u=t.byteLength,i=l._malloc(u),r.push(i),l.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,u),i)}else u=t.byteLength,i=l._malloc(u),r.push(i),l.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,u),i)}}let w=l.stackSave(),y=l.stackAlloc(4*d.length);try{d.forEach((e,t)=>l.setValue(y+t*p,e,4===p?"i32":"i64"));let e=l._OrtCreateTensor(qe(f),i,u,y,d.length,et(c));0===e&&_e(`Can't create tensor for input/output. session=${n}, index=${a}.`),t.push(e)}finally{l.stackRestore(w)}},Ht=async(e,t,r,n,o,a)=>{let s=Se(),i=s.PTR_SIZE,u=Gt.get(e);if(!u)throw new Error(`cannot run inference. invalid session id: ${e}`);let l=u[0],p=u[1],f=u[2],d=u[3],h=u[4],c=u[5],w=t.length,y=n.length,m=0,g=[],b=[],v=[],T=[],E=s.stackSave(),I=s.stackAlloc(w*i),C=s.stackAlloc(w*i),A=s.stackAlloc(y*i),x=s.stackAlloc(y*i);try{[m,g]=Ge(a),$("wasm prepareInputOutputTensor");for(let n=0;n<w;n++)await zt(r[n],b,T,e,p[t[n]],t[n],h);for(let t=0;t<y;t++)await zt(o[t],v,T,e,f[n[t]],w+n[t],h);R("wasm prepareInputOutputTensor");for(let e=0;e<w;e++)s.setValue(I+e*i,b[e],"*"),s.setValue(C+e*i,p[t[e]],"*");for(let e=0;e<y;e++)s.setValue(A+e*i,v[e],"*"),s.setValue(x+e*i,f[n[e]],"*");if(d&&!c){let{handle:r,outputPreferredLocations:a,outputPreferredLocationsEncoded:i}=d;if(p.length!==w)throw new Error(`input count from feeds (${w}) is expected to be always equal to model's input count (${p.length}).`);$("wasm bindInputsOutputs");for(let n=0;n<w;n++){let o=t[n];0!==await s._OrtBindInput(r,p[o],b[n])&&_e(`Can't bind input[${n}] for session=${e}.`)}for(let t=0;t<y;t++){let u=n[t];o[t]?.[3]?0!==s._OrtBindOutput(r,f[u],v[t],0)&&_e(`Can't bind pre-allocated output[${t}] for session=${e}.`):0!==s._OrtBindOutput(r,f[u],0,i[u])&&_e(`Can't bind output[${t}] to ${a[t]} for session=${e}.`)}R("wasm bindInputsOutputs"),Gt.set(e,[l,p,f,d,h,!0])}let u;s.jsepOnRunStart?.(l),s.webnnOnRunStart?.(l),u=d?await s._OrtRunWithBinding(l,d.handle,y,A,m):await s._OrtRun(l,C,I,w,x,y,A,m),0!==u&&_e("failed to call OrtRun().");let E=[],O=[];$("wasm ProcessOutputTensor");for(let t=0;t<y;t++){let r=Number(s.getValue(A+t*i,"*"));if(r===v[t]){E.push(o[t]);continue}let a,u=s.stackSave(),l=s.stackAlloc(4*i),p=!1,f=0;try{0!==s._OrtGetTensorData(r,l,l+i,l+2*i,l+3*i)&&_e(`Can't access output tensor data on index ${t}.`);let o=4===i?"i32":"i64",u=Number(s.getValue(l,o));f=s.getValue(l+i,"*");let h=s.getValue(l+2*i,"*"),c=Number(s.getValue(l+3*i,o)),w=[];for(let e=0;e<c;e++)w.push(Number(s.getValue(h+e*i,o)));0!==s._OrtFree(h)&&_e("Can't free memory for tensor dims.");let y=w.reduce((e,t)=>e*t,1);a=Ze(u);let m=d?.outputPreferredLocations[n[t]];if("string"===a){if("gpu-buffer"===m||"ml-tensor"===m)throw new Error("String tensor is not supported on GPU.");let e=[];for(let t=0;t<y;t++){let r=s.getValue(f+t*i,"*"),n=s.getValue(f+(t+1)*i,"*"),o=t===y-1?void 0:n-r;e.push(s.UTF8ToString(r,o))}E.push([a,w,e,"cpu"])}else if("gpu-buffer"===m&&y>0){let t=s.webgpuGetBuffer;if(!t)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let n=t(f),o=Xe(u,y);if(void 0===o||!Ke(a))throw new Error(`Unsupported data type: ${a}`);p=!0;{s.webgpuRegisterBuffer(n,e,f);let t=s.webgpuCreateDownloader(n,o,e);E.push([a,w,{gpuBuffer:n,download:async()=>{let e=await t();return new(Ye(a))(e)},dispose:()=>{0!==s._OrtReleaseTensor(r)&&_e("Can't release tensor.")}},"gpu-buffer"])}}else if("ml-tensor"===m&&y>0){let t=s.webnnEnsureTensor,n=s.webnnIsGraphInputOutputTypeSupported;if(!t||!n)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(void 0===Xe(u,y)||!Qe(a))throw new Error(`Unsupported data type: ${a}`);if(!n(e,a,!1))throw new Error(`preferredLocation "ml-tensor" for ${a} output is not supported by current WebNN Context.`);let o=await t(e,f,u,w,!1);p=!0,E.push([a,w,{mlTensor:o,download:s.webnnCreateMLTensorDownloader(f,a),dispose:()=>{s.webnnReleaseTensorId(f),s._OrtReleaseTensor(r)}},"ml-tensor"])}else if("ml-tensor-cpu-output"===m&&y>0){let e=s.webnnCreateMLTensorDownloader(f,a)(),t=E.length;p=!0,O.push((async()=>{let n=[t,await e];return s.webnnReleaseTensorId(f),s._OrtReleaseTensor(r),n})()),E.push([a,w,[],"cpu"])}else{let e=new(Ye(a))(y);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(s.HEAPU8.subarray(f,f+e.byteLength)),E.push([a,w,e,"cpu"])}}finally{s.stackRestore(u),"string"===a&&f&&s._free(f),p||s._OrtReleaseTensor(r)}}d&&!h&&(0!==s._OrtClearBoundOutputs(d.handle)&&_e("Can't clear bound outputs."),Gt.set(e,[l,p,f,d,h,!1]));for(let[e,t]of await Promise.all(O))E[e][2]=t;return R("wasm ProcessOutputTensor"),E}finally{s.webnnOnRunEnd?.(l),s.stackRestore(E),r.forEach(e=>{e&&"gpu-buffer"===e[3]&&s.webgpuUnregisterBuffer(e[2].gpuBuffer)}),o.forEach(e=>{e&&"gpu-buffer"===e[3]&&s.webgpuUnregisterBuffer(e[2].gpuBuffer)}),b.forEach(e=>s._OrtReleaseTensor(e)),v.forEach(e=>s._OrtReleaseTensor(e)),T.forEach(e=>s._free(e)),0!==m&&s._OrtReleaseRunOptions(m),g.forEach(e=>s._free(e))}},qt=e=>{let t=Se(),r=Gt.get(e);if(!r)throw new Error("invalid session id");let n=r[0],o=t._OrtEndProfiling(n);0===o&&_e("Can't get an profile file name."),t._OrtFree(o)},Zt=e=>{let t=[];for(let r of e){let e=r[2];!Array.isArray(e)&&"buffer"in e&&t.push(e.buffer)}return t}}),gr=G(()=>{ie(),mr(),It(),Et(),Xt=()=>!!l.wasm.proxy&&typeof document<"u",Jt=!1,Kt=!1,Qt=!1,rr=new Map,nr=(e,t)=>{let r=rr.get(e);r?r.push(t):rr.set(e,[t])},or=()=>{if(Jt||!Kt||Qt||!Yt)throw new Error("worker not ready")},ar=e=>{switch(e.data.type){case"init-wasm":Jt=!1,e.data.err?(Qt=!0,tr[1](e.data.err)):(Kt=!0,tr[0]()),er&&(URL.revokeObjectURL(er),er=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=rr.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},sr=async()=>{if(!Kt){if(Jt)throw new Error("multiple calls to 'initWasm()' detected.");if(Qt)throw new Error("previous call to 'initWasm()' failed.");if(Jt=!0,Xt())return new Promise((e,t)=>{Yt?.terminate(),Ce().then(([r,n])=>{try{(Yt=n).onerror=e=>t(e),Yt.onmessage=ar,tr=[e,t];let o={type:"init-wasm",in:l};if(!o.in.wasm.wasmPaths&&r){let e=me();e&&(o.in.wasm.wasmPaths=e)}Yt.postMessage(o),er=r}catch(e){t(e)}},t)});try{await Be(l.wasm),await Pt(l),Kt=!0}catch(e){throw Qt=!0,e}finally{Jt=!1}}},ir=async e=>{if(Xt())return or(),new Promise((t,r)=>{nr("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:l}};Yt.postMessage(n)});await _t(l,e)},ur=async e=>Xt()?(or(),new Promise((t,r)=>{nr("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};Yt.postMessage(n,[e.buffer])})):Ft(e),lr=async(e,t)=>{if(Xt()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return or(),new Promise((r,n)=>{nr("create",[r,n]);let o={type:"create",in:{model:e,options:{...t}}},a=[];e instanceof Uint8Array&&a.push(e.buffer),Yt.postMessage(o,a)})}return jt(e,t)},pr=async e=>{if(Xt())return or(),new Promise((t,r)=>{nr("release",[t,r]);let n={type:"release",in:e};Yt.postMessage(n)});Vt(e)},fr=async(e,t,r,n,o,a)=>{if(Xt()){if(r.some(e=>"cpu"!==e[3]))throw new Error("input tensor on GPU is not supported for proxy.");if(o.some(e=>e))throw new Error("pre-allocated output tensor is not supported for proxy.");return or(),new Promise((o,s)=>{nr("run",[o,s]);let i=r,u={type:"run",in:{sessionId:e,inputIndices:t,inputs:i,outputIndices:n,options:a}};Yt.postMessage(u,Zt(i))})}return Ht(e,t,r,n,o,a)},dr=async e=>{if(Xt())return or(),new Promise((t,r)=>{nr("end-profiling",[t,r]);let n={type:"end-profiling",in:e};Yt.postMessage(n)});qt(e)}}),br=G(()=>{ie(),gr(),Ot(),ue(),Ut(),hr=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},cr=e=>{switch(e[3]){case"cpu":return new A(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Ke(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:o}=e[2];return A.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:o})}case"ml-tensor":{let t=e[0];if(!Qe(t))throw new Error(`not supported data type: ${t} for deserializing MLTensor tensor`);let{mlTensor:r,download:n,dispose:o}=e[2];return A.fromMLTensor(r,{dataType:t,dims:e[1],download:n,dispose:o})}default:throw new Error(`invalid data location: ${e[3]}`)}},wr=class{async fetchModelAndCopyToWasmMemory(e){return ur(await tt(e))}async loadModel(e,t){let r;U(),r="string"==typeof e?await this.fetchModelAndCopyToWasmMemory(e):e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await lr(r,t),L()}async dispose(){return pr(this.sessionId)}async run(e,t,r){U();let n=[],o=[];Object.entries(e).forEach(e=>{let t=e[0],r=e[1],a=this.inputNames.indexOf(t);if(-1===a)throw new Error(`invalid input '${t}'`);n.push(r),o.push(a)});let a=[],s=[];Object.entries(t).forEach(e=>{let t=e[0],r=e[1],n=this.outputNames.indexOf(t);if(-1===n)throw new Error(`invalid output '${t}'`);a.push(r),s.push(n)});let i=n.map((e,t)=>hr(e,()=>`input "${this.inputNames[o[t]]}"`)),u=a.map((e,t)=>e?hr(e,()=>`output "${this.outputNames[s[t]]}"`):null),l=await fr(this.sessionId,o,i,s,u,r),p={};for(let e=0;e<l.length;e++)p[this.outputNames[s[e]]]=a[e]??cr(l[e]);return L(),p}startProfiling(){}endProfiling(){dr(this.sessionId)}}}),vr={};D(vr,{OnnxruntimeWebAssemblyBackend:()=>Er,initializeFlags:()=>Tr,wasmBackend:()=>Ir});var Tr,Er,Ir,Cr=G(()=>{ie(),gr(),br(),Tr=()=>{("number"!=typeof l.wasm.initTimeout||l.wasm.initTimeout<0)&&(l.wasm.initTimeout=0);let e=l.wasm.simd;if("boolean"!=typeof e&&void 0!==e&&"fixed"!==e&&"relaxed"!==e&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),l.wasm.simd=!1),"boolean"!=typeof l.wasm.proxy&&(l.wasm.proxy=!1),"boolean"!=typeof l.wasm.trace&&(l.wasm.trace=!1),"number"!=typeof l.wasm.numThreads||!Number.isInteger(l.wasm.numThreads)||l.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)l.wasm.numThreads=1;else{let e=typeof navigator>"u"?_("node:os").cpus().length:navigator.hardwareConcurrency;l.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Ir=new(Er=class{async init(e){Tr(),await sr(),await ir(e)}async createInferenceSessionHandler(e,t){let r=new wr;return await r.loadModel(e,t),r}})});ie(),ie(),ie();var Ar=se;{let e=(Cr(),W(vr)).wasmBackend;n("webgpu",e,5),n("webnn",e,5),n("cpu",e,10),n("wasm",e,10)}Object.defineProperty(l.versions,"web",{value:"1.23.0",enumerable:!0});export{N as InferenceSession,x as TRACE,$ as TRACE_EVENT_BEGIN,R as TRACE_EVENT_END,U as TRACE_FUNC_BEGIN,L as TRACE_FUNC_END,A as Tensor,Ar as default,l as env,n as registerBackend};